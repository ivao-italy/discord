// <auto-generated />
using System;
using Ivao.It.DiscordBot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ivao.It.DiscordBot.Data.Migrations
{
    [DbContext(typeof(DiscordDbContext))]
    [Migration("20220412150613_Events-Scaffolding")]
    partial class EventsScaffolding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Ivao.It.DiscordBot.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("NOW()");

                    b.Property<ulong>("CreatedByUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Ivao.It.DiscordBot.Data.Entities.EventTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("CompletedBy")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<short>("TaskTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("EventTasks");
                });

            modelBuilder.Entity("Ivao.It.DiscordBot.Data.Entities.EventTaskType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    b.Property<short>("DaysBefore")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<ulong>("StaffGroupToNofify")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.ToTable("EventTaskTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            DaysBefore = (short)30,
                            Description = "Web Booking Tool",
                            StaffGroupToNofify = 621792089700696064ul
                        },
                        new
                        {
                            Id = (short)2,
                            DaysBefore = (short)20,
                            Description = "Forum Topic",
                            StaffGroupToNofify = 621788428832342036ul
                        },
                        new
                        {
                            Id = (short)3,
                            DaysBefore = (short)15,
                            Description = "Routes",
                            StaffGroupToNofify = 621792026375094283ul
                        },
                        new
                        {
                            Id = (short)4,
                            DaysBefore = (short)15,
                            Description = "Graphics",
                            StaffGroupToNofify = 963367786715947048ul
                        },
                        new
                        {
                            Id = (short)5,
                            DaysBefore = (short)10,
                            Description = "Announcement",
                            StaffGroupToNofify = 621788428832342036ul
                        },
                        new
                        {
                            Id = (short)6,
                            DaysBefore = (short)10,
                            Description = "Announcement Social",
                            StaffGroupToNofify = 541216766924423169ul
                        });
                });

            modelBuilder.Entity("Ivao.It.DiscordBot.Data.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Airport")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("PlannedDate")
                        .HasColumnType("date")
                        .HasColumnName("planned_date");

                    b.Property<TimeOnly>("PlannedTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("planned_hour");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.ToView("examlist");

                    b.HasAnnotation("ReadOnly", "ReadOnly");
                });

            modelBuilder.Entity("Ivao.It.DiscordBot.Data.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Airport")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("PlannedDate")
                        .HasColumnType("date")
                        .HasColumnName("planned_date");

                    b.Property<TimeOnly>("PlannedTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("planned_hour");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.ToView("trainingslist");

                    b.HasAnnotation("ReadOnly", "ReadOnly");
                });

            modelBuilder.Entity("Ivao.It.DiscordBot.Data.Entities.User", b =>
                {
                    b.Property<string>("Vid")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<ulong?>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<DateTime?>("GdprAcceptDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Vid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ivao.It.DiscordBot.Data.Entities.EventTask", b =>
                {
                    b.HasOne("Ivao.It.DiscordBot.Data.Entities.Event", "Event")
                        .WithMany("Tasks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ivao.It.DiscordBot.Data.Entities.EventTaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("Ivao.It.DiscordBot.Data.Entities.Event", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
